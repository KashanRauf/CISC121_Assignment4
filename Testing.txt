INPUT: d*a45c/bbac
OUTPUTS:
AABBCCD
ABCD
['ABCD', 'ABDC', 'ACBD', 'ACDB', 'ADBC', 'ADCB',
    'BACD', 'BADC', 'BCAD', 'BCDA', 'BDAC', 'BDCA',
    'CABD', 'CADB', 'CBAD', 'CBDA', 'CDAB', 'CDBA', 
    'DABC', 'DACB', 'DBAC', 'DBCA', 'DCAB', 'DCBA']

INPUT: abc
OUTPUTS:
ABC
ABC
['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']

INPUT: ba
OUTPUTS:
AB
AB
['AB', 'BA']

INPUT: a
OUTPUTS:
A
A
['A']

- Each input has 'n' unique letters and n! unique permutations
- It is shown that the program can not only find all permutations, but is able to clean the input (remove non-letters/duplicates, convert to capitals, sort, etc.)

- Other inputs, with input sizes of 5 (abcde), 10 (abcdefghij), and larger (processing reduces to 10 letters) were tested
- Not included in file due to the large output, which reduce clarity
- Larger input sizes could be used, however due to the limit (10) resulting in 10! (3,628,800) permutations, it is difficult to include in this document
- This is partially due to how rapidly factorials grow as 'n' increases, as such they have not been included in test cases